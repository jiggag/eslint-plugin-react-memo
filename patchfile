diff --git a/__tests__/require-memo.ts b/__tests__/require-memo.ts
index c360228..3644a1c 100644
--- a/__tests__/require-memo.ts
+++ b/__tests__/require-memo.ts
@@ -51,8 +51,30 @@ ruleTester.run("memo", rule, {
       parserOptions: { ecmaVersion: 6, sourceType: "module" },
       code: `export default function() { return <div /> };`,
     },
+    {
+      code: `const Component = React.useMemo(() => <div />)`,
+      options: [{skip: ['useMemo']}],
+    },
+    {
+      code: `const Component = useMemo(() => <div />)`,
+      options: [{skip: ['useMemo']}],
+    },
+    {
+      code: `const C = memoRef(() => <div />)`,
+      options: [2, {skip: ['memoRef']}],
+    },
   ],
   invalid: [
+    {
+      code: `const Component = useMemo(() => <div />)`,
+      options: [2],
+      errors: [{ messageId: "memo-required" }],
+    },
+    {
+      code: `const C = memoRef(() => <div />)`,
+      options: [2],
+      errors: [{ messageId: "memo-required" }],
+    },
     {
       code: `const Component = () => <div />`,
       errors: [{ messageId: "memo-required" }],
diff --git a/patchfile b/patchfile
new file mode 100644
index 0000000..fcfe4d7
--- /dev/null
+++ b/patchfile
@@ -0,0 +1,38 @@
+diff --git a/__tests__/require-memo.ts b/__tests__/require-memo.ts
+index c360228..fc80d0d 100644
+--- a/__tests__/require-memo.ts
++++ b/__tests__/require-memo.ts
+@@ -51,6 +51,12 @@ ruleTester.run("memo", rule, {
+       parserOptions: { ecmaVersion: 6, sourceType: "module" },
+       code: `export default function() { return <div /> };`,
+     },
++    {
++      code: `const Component = React.useMemo(() => <div />)`,
++    },
++    {
++      code: `const Component = useMemo(() => <div />)`,
++    },
+   ],
+   invalid: [
+     {
+diff --git a/require-memo.ts b/require-memo.ts
+index 8209011..2007219 100644
+--- a/require-memo.ts
++++ b/require-memo.ts
+@@ -14,11 +14,14 @@ function isMemoCallExpression(node: Rule.Node) {
+       object.type === "Identifier" &&
+       property.type === "Identifier" &&
+       object.name === "React" &&
+-      property.name === "memo"
++      (property.name === "memo" || property.name === "useMemo")
+     ) {
+       return true;
+     }
+-  } else if (node.callee.type === "Identifier" && node.callee.name === "memo") {
++  } else if (
++    node.callee.type === "Identifier" &&
++    (node.callee.name === "memo" || node.callee.name === "useMemo")
++  ) {
+     return true;
+   }
+ 
diff --git a/require-memo.ts b/require-memo.ts
index 8209011..0871f5e 100644
--- a/require-memo.ts
+++ b/require-memo.ts
@@ -4,7 +4,13 @@ import * as path from "path";
 
 const componentNameRegex = /^[^a-z]/;
 
-function isMemoCallExpression(node: Rule.Node) {
+type Options = { skip?: string[] }[];
+
+function checkSkipOptions(name: string, options: Options) {
+  return options.findIndex(({ skip = [] }) => skip.findIndex(value => value === name) > -1) > -1;
+}
+
+function isMemoCallExpression(node: Rule.Node, options: Options) {
   if (node.type !== "CallExpression") return false;
   if (node.callee.type === "MemberExpression") {
     const {
@@ -14,11 +20,14 @@ function isMemoCallExpression(node: Rule.Node) {
       object.type === "Identifier" &&
       property.type === "Identifier" &&
       object.name === "React" &&
-      property.name === "memo"
+      (property.name === "memo" || checkSkipOptions(property.name, options))
     ) {
       return true;
     }
-  } else if (node.callee.type === "Identifier" && node.callee.name === "memo") {
+  } else if (
+    node.callee.type === "Identifier" &&
+    (node.callee.name === "memo" || checkSkipOptions(node.callee.name, options))
+  ) {
     return true;
   }
 
@@ -36,7 +45,7 @@ function checkFunction(
 ) {
   let currentNode = node.parent;
   while (currentNode.type === "CallExpression") {
-    if (isMemoCallExpression(currentNode)) {
+    if (isMemoCallExpression(currentNode, context.options)) {
       return;
     }
 
